package frames;

import java.awt.List;
import java.util.ArrayList;
import java.util.Vector;

import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

import com.bankrupt.tools.BankAccountManager;
import com.bankrupt.bankaccount.BankAccount;
import com.bankrupt.bankaccount.Operation;
import com.bankrupt.datatools.SQLInteraction;
import com.bankrupt.tools.CustomerOperation;
import com.bankrupt.tools.Values;
import com.bankrupt.user.User;

/**
 *
 * @author valentin
 */
public class CustomerAccountsFrame extends javax.swing.JFrame {

    /**
     * Creates new form CustomerAccountsFrame
     */
	private SQLInteraction sqlInteraction;
	private int selectedAccountIndex=-1;
	
	private BankAccountManager bankAccountManager;
	private CustomerOperation customerOperations;
	
    public CustomerAccountsFrame(User user, SQLInteraction sqlInteraction) {
        initComponents();
        this.sqlInteraction=sqlInteraction;
        bankAccountManager=new BankAccountManager(sqlInteraction);
        customerOperations= new CustomerOperation(sqlInteraction);
        Vector<BankAccount> vectAccounts = bankAccountManager.getUserAccounts(user);
        DefaultListModel listModel=parseAccountsToJListModel(vectAccounts);
        accountList.setModel(listModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        accountList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        OperationsList = new javax.swing.JList<>();
        comptesLabel = new javax.swing.JLabel();
        operationsLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        accountList.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        accountList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        accountList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        accountList.addListSelectionListener(new ListSelectionListener() {

			@Override
			public void valueChanged(ListSelectionEvent arg0) {
				if(selectedAccountIndex != accountList.getSelectedIndex()) {
					selectedAccountIndex=accountList.getSelectedIndex();
					updateOperationsList(selectedAccountIndex);
				}else {
					
				}					
			}
        });
        jScrollPane1.setViewportView(accountList);

        OperationsList.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        OperationsList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        OperationsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(OperationsList);

        comptesLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        comptesLabel.setText("Vos comptes :");

        operationsLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        operationsLabel.setText("Opérations :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comptesLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(operationsLabel)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 719, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addComponent(comptesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(operationsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>                        
   
    /*private DefaultListModel parseOperationsToJListModel(Vector<Object> vectObjet) {
    	DefaultListModel modelList = new DefaultListModel();
    	
    	//TODO TOFINISH
    	int index=0;
		for (Object objet : vectObjet) {
			Object[] model = new Object[8];
			ArrayList<String> list = new ArrayList<String>();
			list.add(String.valueOf(account.getAmount()));

			if(selectedAccountIndex==account.getReceiver()) {
				model[0]=account.getSender();
				model
			}else {
				model[0]=account.getReceiver();
			}
			list.add(String.valueOf(account.()));
			list.add(String.valueOf(account.getAccountType()));
			list.add(String.valueOf(account.getAccountNumber()));
			/*model[0] = account.getAccountNumber();
			model[1] = account.getAccountType();
			model[2] = account.getBalance();

			modelList.insertElementAt(model, index);
			modelList.set
			index++;
		}
		return modelList;
    }
    */
    
    
    
    private DefaultListModel parseAccountsToJListModel(Vector<BankAccount> vectAccounts) {
    	DefaultListModel modelList = new DefaultListModel();
    	
		String header[] = { "id", "Nom", "Prenom", "Mot de passe", "Mail", "Addresse", "Rôle" };
		int index=0;
		for (BankAccount account : vectAccounts) {
			Object[] model = new Object[8];
			ArrayList<String> list = new ArrayList<String>();
			if(account.getAccountType()==Values.currentAccountType) {
				list.add(Values.currentAccount);
			}else {
				list.add(String.valueOf(account.getAccountType()));
			}
			list.add(String.valueOf(account.getAccountNumber()));
			list.add(String.valueOf(account.getAccountType()));
			list.add(String.valueOf(account.getAccountNumber()));
			/*model[0] = account.getAccountNumber();
			model[1] = account.getAccountType();
			model[2] = account.getBalance();*/

			modelList.insertElementAt(list, index);
			index++;
		}
		return modelList;
	}
    
	private void updateOperationsList(int selectedAccountIndex) {
		Vector<Operation> operationsVect= new Vector<Operation>();
		operationsVect=customerOperations.getOperationsOfAccount( selectedAccountIndex);
		
		for(Operation operation: operationsVect) {
			
		}
	}

    // Variables declaration - do not modify                     
    private javax.swing.JList<String> OperationsList;
    private javax.swing.JList<String> accountList;
    private javax.swing.JLabel comptesLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel operationsLabel;
    // End of variables declaration                   
}
